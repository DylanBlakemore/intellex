defmodule Intellex.Message do
  @moduledoc """
  Defines a Message which is sent to the LLM server
  """

  defstruct [:role, :content]

  @type t :: %__MODULE__{}

  @doc """
  A message sent by a human using the tool
  """
  @spec human(String.t()) :: t()
  def human(content) do
    %__MODULE__{role: "human", content: content}
  end

  @doc """
  A message generated by the AI
  """
  @spec assistant(String.t()) :: t()
  def assistant(content) do
    %__MODULE__{role: "assistant", content: content}
  end

  @doc """
  A message used to prime the AI
  """
  @spec system(String.t()) :: t()
  def system(content) do
    %__MODULE__{role: "system", content: content}
  end

  @doc """
  A generic chat message
  """
  @spec chat(String.t()) :: t()
  def chat(content) do
    %__MODULE__{role: "chat", content: content}
  end

  @doc """
  Converts a message to a prompt
  """
  @spec prompt(t()) :: map()
  def prompt(message) do
    %{"role" => message.role, "text" => message.content}
  end
end
